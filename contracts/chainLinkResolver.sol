// SPDX-License-Identifier: AGPL-3.0

pragma solidity ^0.8.0;
pragma experimental ABIEncoderV2;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./interfaces/KeeperCompatible.sol";

interface IResolver {
    function debtTrigger(address strategy) external view returns (bool _canExec, bytes memory _execPayload);
    function collatTrigger(address strategy) external view returns (bool _canExec, bytes memory _execPayload); 
}

interface IKeeperProxy {
    function rebalanceDebt() external;
    function rebalanceCollateral() external;
}


contract ChainLinkUpkeep is KeeperCompatibleInterface {

    address public strategy;
    address public keeperProxy;
    address public resolver;

    constructor  (address _strategy, address _keeperProxy, address _resolver) public {
        strategy = _strategy;
        keeperProxy = _keeperProxy;
        resolver = _resolver;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory _execPayload) {
        /// first we check debt trigger, if debt rebalance doesn't need to be checked then we check collat trigger
        (upkeepNeeded, _execPayload) = IResolver(resolver).debtTrigger(strategy);

        if (!upkeepNeeded) {
            (upkeepNeeded, _execPayload) = IResolver(resolver).collatTrigger(strategy);
        }
    }

    function performUpkeep(bytes calldata /* performData */) external override {

        (bool debtTrigger, ) = IResolver(resolver).debtTrigger(strategy);
        (bool collatTrigger, ) = IResolver(resolver).debtTrigger(strategy);

        //We highly recommend revalidating the upkeep in the performUpkeep function

        if (debtTrigger) {
            IKeeperProxy(keeperProxy).rebalanceDebt();
        } else {
            if (collatTrigger) {
                IKeeperProxy(keeperProxy).rebalanceCollateral();
            }
        }

        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    
    }    

}